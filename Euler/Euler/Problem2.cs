using System;

/* The problem description of Problem 2 of Project Euler reads:
    Each term in the Fibonacci sequence is generated by adding the previous two terms
    By starting with 1 and 2, the first 10 terms will be:
    1,2,3,5,8,13,21,34,55,89,...
    Find the sum of all the even-valued terms in the sequence which do not exceed four million
 */ 

namespace Euler
{
    public class Problem2
    {
        public static void Solve()
        {
            int[] Feb = new int[2];
            int sum = 0;
            Feb[0] = 1;
            Feb[1] = 2;

            do
            {
                /* Another cool method to filter out the even number Fibonacci numbers:
                    By examining the pattern, every third number starting from the F3 term is even, and through some math manipulation:
                    Fn = 4*Fn-3 + Fn-6
                */
                if (Feb[1] % 2 == 0)
                {
                    sum = sum + Feb[1];
                }

                /* A cool alternate method to switch between the index 0 and 1, this removes the intermediate variable
                    int i = 0;
                    while (fib[i] < 4E6) {
                        sum += fib[i];
                        i = (i+1) % 2;
                        fib[i] = 4 * fib[(i+1) % 2] + fib[i];
                    }
                */

                int Feb_int = Feb[0] + Feb[1];
                Feb[0] = Feb[1];
                Feb[1] = Feb_int;

            } while (Feb[1] < 4E6);

            Console.WriteLine(sum);        
        }
    }
}
